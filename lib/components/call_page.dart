import 'dart:async';
import 'package:agora_rtc_engine/rtc_engine.dart';
import 'package:agora_rtc_engine/rtc_local_view.dart' as RtcLocalView;
import 'package:agora_rtc_engine/rtc_remote_view.dart' as RtcRemoteView;
import 'package:flutter/material.dart';
import 'package:project_eureka_flutter/services/video_communication.dart';
import 'package:project_eureka_flutter/components/call_ended_confirmation.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart' as DotEnv;

class CallPage extends StatefulWidget {
  final String token;

  final String channelName;

  final String action;

  // ChannelName is a combination of user id's (caller's + target's)
  const CallPage({Key key, this.token, this.channelName, this.action}) : super(key: key);

  @override
  _CallPageState createState() => _CallPageState();
}

class _CallPageState extends State<CallPage> {
  // id's generated by Agora
  final _users = <int>[];

  // Info strings is optional to show some info on the screen during development. That will be removed later
  final _infoStrings = <String>[];
  bool mutedAudio = false;
  bool mutedVideo = false;
  bool userJoined = false;

  RtcEngine _engine;

  @override
  void dispose() {
    // clear users
    _users.clear();
    // destroy sdk
    _engine.leaveChannel(); // this might be redundant
    _engine.destroy();
    super.dispose();
  }

  @override
  void initState() {
    // initialize agora sdk
    initialize();
    super.initState();
  }

  Future<void> initialize() async {
    // load AGORA APP_ID environmental variable
    await DotEnv.load();
    if (DotEnv.env['AGORA_ID'].isEmpty) {
      setState(() {
        _infoStrings.add(
          'AGORA APP_ID missing, please provide your AGORA APP_ID',
        );
        _infoStrings.add('Agora Engine is not starting');
      });
      return;
    }
    await _initAgoraRtcEngine(DotEnv.env['AGORA_ID']);
    _addAgoraEventHandlers();
    // ignore: deprecated_member_use
    await _engine.enableWebSdkInteroperability(true);
    VideoEncoderConfiguration configuration = VideoEncoderConfiguration();
    configuration.dimensions = VideoDimensions(1920, 1080);
    await _engine.setVideoEncoderConfiguration(configuration);
    await _engine.joinChannel(widget.token, widget.channelName, null, 0);
  }

  /// Create agora sdk instance and initialize
  Future<void> _initAgoraRtcEngine(String appId) async {
    _engine = await RtcEngine.create(appId);
    await _engine.enableVideo();
    await _engine.setChannelProfile(ChannelProfile.Communication);
  }

  /// Add agora event handlers
  // some events may only be used for testing
  void _addAgoraEventHandlers() {
    _engine.setEventHandler(RtcEngineEventHandler(error: (code) {
      setState(() {
        final info = 'onError: $code';
        _infoStrings.add(info);
      });
    }, joinChannelSuccess: (channel, uid, elapsed) {
      setState(() {
        //final info = 'onJoinChannel: $channel, uid: $uid';
        final info = 'onJoinChannel: $channel';
        _infoStrings.add(info);
      });
    }, leaveChannel: (stats) {
      setState(() {
        _infoStrings.add('onLeaveChannel');
        _users.clear();
      });
    }, userJoined: (uid, elapsed) {
      setState(() {
        final info = 'userJoined: $uid';
        userJoined = true;
        _infoStrings.add(info);
        _users.add(uid);
      });
    }, userOffline: (uid, elapsed) {
      setState(() {
        final info = 'userOffline: $uid';
        _infoStrings.add(info);
        _users.remove(uid);
        // end call if another user left channel
        _onCallEnd(context);
      });
    }, firstRemoteVideoFrame: (uid, width, height, elapsed) {
      setState(() {
        final info = 'firstRemoteVideo: $uid ${width}x $height';
        _infoStrings.add(info);
      });
    }));
  }

  /// Helper function to get list of native views
  List<Widget> _getRenderViews() {
    final List<StatefulWidget> list = [];
    list.add(RtcLocalView.SurfaceView());
    _users.forEach((int uid) => list.add(RtcRemoteView.SurfaceView(uid: uid)));
    return list;
  }

  /// Video view wrapper
  Widget _videoView(view) {
    return Expanded(child: Container(child: view));
  }

  /// Video view row wrapper
  Widget _expandedVideoRow(List<Widget> views) {
    final wrappedViews = views.map<Widget>(_videoView).toList();
    return Expanded(
      child: Row(
        children: wrappedViews,
      ),
    );
  }

  /// Video layout wrapper
  Widget _viewRows() {
    final views = _getRenderViews();
    switch (views.length) {
      case 1:
        return Container(
            child: Column(
          children: <Widget>[_videoView(views[0])],
        ));
      case 2:
        return Container(
            child: Column(
          children: <Widget>[
            _expandedVideoRow([views[1]]),
            _expandedVideoRow([views[0]]),
          ],
        ));
      default:
    }
    return Container();
  }

  /// Toolbar layout
  Widget _toolbar() {
    return Container(
      alignment: Alignment.bottomCenter,
      padding: const EdgeInsets.symmetric(vertical: 48),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.end,
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          if(userJoined == false)
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              if(widget.action == "call")
                Text("Calling...", style: TextStyle(fontSize: 35.0, color: Colors.white)),
              if(widget.action == "answer")
                Text("Connecting...", style: TextStyle(fontSize: 35.0, color: Colors.white)),
            ],
          ),
          RawMaterialButton(
            onPressed: _onSwitchCamera,
            child: Icon(
              Icons.switch_camera,
              color: Colors.blueAccent,
              size: 20.0,
            ),
            shape: CircleBorder(),
            elevation: 2.0,
            fillColor: Colors.white,
            padding: const EdgeInsets.all(20.0),
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              RawMaterialButton(
                onPressed: _onToggleMuteVideo,
                child: Icon(
                  mutedVideo ? Icons.pause : Icons.photo_camera,
                  color: mutedVideo ? Colors.white : Colors.blueAccent,
                  size: 20.0,
                ),
                shape: CircleBorder(),
                elevation: 2.0,
                fillColor: mutedVideo ? Colors.blueAccent : Colors.white,
                padding: const EdgeInsets.all(12.0),
              ),
              RawMaterialButton(
                // if user on the other end hung up, then call will end on both sides
                onPressed: () => _onCallEnd(context),
                child: Icon(
                  Icons.call_end,
                  color: Colors.white,
                  size: 35.0,
                ),
                shape: CircleBorder(),
                elevation: 2.0,
                fillColor: Colors.redAccent,
                padding: const EdgeInsets.all(15.0),
              ),
              RawMaterialButton(
                onPressed: _onToggleMuteAudio,
                child: Icon(
                  mutedAudio ? Icons.mic_off : Icons.mic,
                  color: mutedAudio ? Colors.white : Colors.blueAccent,
                  size: 20.0,
                ),
                shape: CircleBorder(),
                elevation: 2.0,
                fillColor: mutedAudio ? Colors.blueAccent : Colors.white,
                padding: const EdgeInsets.all(12.0),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// Info panel to show logs
  /// Uncomment to test
   Widget _panel() {
     return Container();
   }
  //   return Container(
  //     padding: const EdgeInsets.symmetric(vertical: 48),
  //     alignment: Alignment.bottomCenter,
  //     child: FractionallySizedBox(
  //       heightFactor: 0.5,
  //       child: Container(
  //         padding: const EdgeInsets.symmetric(vertical: 48),
  //         child: ListView.builder(
  //           reverse: true,
  //           itemCount: _infoStrings.length,
  //           itemBuilder: (BuildContext context, int index) {
  //             if (_infoStrings.isEmpty) {
  //               return null;
  //             }
  //             return Padding(
  //               padding: const EdgeInsets.symmetric(
  //                 vertical: 3,
  //                 horizontal: 10,
  //               ),
  //               child: Row(
  //                 mainAxisSize: MainAxisSize.min,
  //                 children: [
  //                   Flexible(
  //                     child: Container(
  //                       padding: const EdgeInsets.symmetric(
  //                         vertical: 2,
  //                         horizontal: 5,
  //                       ),
  //                       decoration: BoxDecoration(
  //                         color: Colors.yellowAccent,
  //                         borderRadius: BorderRadius.circular(5),
  //                       ),
  //                       child: Text(
  //                         _infoStrings[index],
  //                         style: TextStyle(color: Colors.blueGrey),
  //                       ),
  //                     ),
  //                   )
  //                 ],
  //               ),
  //             );
  //           },
  //         ),
  //       ),
  //     ),
  //   );
  // }

  void _onCallEnd(BuildContext context) {
    //callEnded = true;

    VideoCallService().hungUpCaller(widget.channelName);
    print("Caller ended the call");

    Navigator.pop(context);
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => CallEnded()),
    );
  }

  void _onToggleMuteVideo() {
    print("muted video");
    setState(() {
      mutedVideo = !mutedVideo;
    });
    _engine.enableLocalVideo(!mutedVideo);
  }

  void _onToggleMuteAudio() {
    setState(() {
      mutedAudio = !mutedAudio;
    });
    _engine.muteLocalAudioStream(mutedAudio);
  }

  void _onSwitchCamera() {
    _engine.switchCamera();
  }

  @override
  Widget build(BuildContext context) {
    int count = 0;
    // if user clicks back button, alert if user wants to leave or stay in the call
    return new WillPopScope(
        onWillPop: () async {
          showDialog(
              context: context,
              builder: (context) => AlertDialog(
                    content: Text(
                      'Are you sure you want to leave?',
                      textAlign: TextAlign.center,
                    ),
                    actions: <Widget>[
                      FlatButton(
                          // if user chooses Leave, it will end the call, otherwise will stay on the page
                          onPressed: () => [
                                Navigator.of(context)
                                    .popUntil((_) => count++ >= 2),
                                VideoCallService()
                                    .hungUpCaller(widget.channelName),
                                Navigator.push(
                                context,
                                MaterialPageRoute(builder: (context) => CallEnded()),
                                ),
                              ],
                          child: Text('Leave')),
                      FlatButton(
                          onPressed: () => Navigator.pop(context),
                          child: Text('Cancel')),
                    ],
                  ));

          return false;
        },
        child: Scaffold(
          backgroundColor: Colors.black,
          body: Center(
            child: Stack(
              children: <Widget>[
                _viewRows(),
                _panel(),
                _toolbar(),
              ],
            ),
          ),
        ));
  }
}
